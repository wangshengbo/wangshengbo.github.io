<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Oliver&#39;s Blog</title>
  
  <subtitle>根本没有正确的选择，只能靠奋斗来使当初的选择显的正确</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangshengbo.me/"/>
  <updated>2017-10-06T06:50:46.522Z</updated>
  <id>http://wangshengbo.me/</id>
  
  <author>
    <name>Oliver</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java数据类型、进制和位运算学习总结</title>
    <link href="http://wangshengbo.me/2017/10/06/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%9B%E5%88%B6%E5%92%8C%E4%BD%8D%E8%BF%90%E7%AE%97%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://wangshengbo.me/2017/10/06/Java数据类型、进制和位运算学习总结/</id>
    <published>2017-10-06T06:49:10.467Z</published>
    <updated>2017-10-06T06:50:46.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java中的基础类型有：<strong>byte</strong>、<strong>short</strong>、<strong>int</strong>、<strong>long</strong>、<strong>float</strong>、<strong>double</strong>、<strong>char</strong>和<strong>boolean</strong><br>它们可被分为四种类型，整型、浮点型、char型和boolean型</p><ul><li>整型：<strong>byte</strong>、<strong>short</strong>、<strong>int</strong>、<strong>long</strong> 分别占用1、2、4、8个字节的空间</li><li>浮点型：<strong>float</strong>、<strong>double</strong> 分别占用4、8个字节 </li><li>char型：<strong>char</strong> 占用2个字节</li><li>boolean型：<strong>boolean</strong>《Java虚拟机规范》指出单独使用是4个字节，在数组中又是1个字节，但是不对应任何整数值</li></ul><p>每种数值类型的最大表示范围可以通过包装类的静态属性取到，比如Integer.MAX_VALUE，Integer.MIN_VALUE<br> <a href="http://blog.csdn.net/steven_oyj/article/details/4714760" target="_blank" rel="external">原文链接</a></p><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p>在Java中整型数据有8进制、10进制或者16进制3种表示方法，不能直接使用2进制表示数字<br><strong>十进制</strong>：用多个0~9的数字表示，首位不能为0<br><strong>八进制</strong>：以数字0开头，后面跟多个0~7的数字。但是，当使用八进制数据表示转义字符时不能用0开头，例如：\ddd<br><strong>十六进制</strong>：以0x或0X开头，后跟多个0~9的数字或者a~f的大写或小写字母。但是，当使用十六进制数据表示转义字符时不能用0x开头，例如：\udddd<br><strong>10进制数有正负之分，但8进制和16进制只能用来表达无符号的整数</strong></p><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p>二进制数在计算机中是以补码形式保存的，正数的原码、反码、补码都是一样的，而负数的补码是其反码加1</p><h3 id="十进制与二进制的转换"><a href="#十进制与二进制的转换" class="headerlink" title="十进制与二进制的转换"></a>十进制与二进制的转换</h3><p>负整数由十进制转换为二进制的步骤为：取反，加1。例如：将-5转换为二进制的步骤如下：<br>首先，5的二进制为101，扩展到32位为00000000 00000000 00000000 00000101，取反之后为11111111 11111111 11111111 11111010，加1之后就是11111111 11111111 11111111 11111011，这就是-5的二进制表示。<br>负整数由二进制转换成十进制也是一样的步骤：取反，加1。继续用上面的例子，-5的二进制11111111 11111111 11111111 11111011取反之后为00000000 00000000 00000000 00000100，加1为00000000 00000000 00000000 00000101，这个二进制的值是5，而最初的二进制数的第一位是1，表示负数，因此转换之后是-5。<br><a href="http://aaagu1234.blog.163.com/blog/static/4009371520128206358167/" target="_blank" rel="external">原文链接</a></p><h2 id="Java转换函数"><a href="#Java转换函数" class="headerlink" title="Java转换函数"></a>Java转换函数</h2><h3 id="1-十进制转其他进制"><a href="#1-十进制转其他进制" class="headerlink" title="1.十进制转其他进制"></a>1.十进制转其他进制</h3><ul><li>Integer.toBinaryString(int i)返回i的二进制字符串表示</li><li>Integer.toHexString(int i)返回i的十六进制字符串表示</li><li>Integer.toOctalString(int i)返回i的八进制字符串表示</li><li>Integer.toString(int i, int radix)返回i的radix进制表示</li></ul><p>代码</p><pre><code>System.out.println(&quot;--二进制--&quot;);System.out.println(Integer.toBinaryString(20));System.out.println(Integer.toString(20,2));System.out.println(Integer.toBinaryString(-20));System.out.println(Integer.toString(-20,2));System.out.println(&quot;--八进制--&quot;);System.out.println(Integer.toOctalString(20));System.out.println(Integer.toString(20,8));System.out.println(Integer.toOctalString(-20));System.out.println(Integer.toString(-20,8));System.out.println(&quot;--十六进制--&quot;);System.out.println(Integer.toHexString(20));System.out.println(Integer.toString(20,16));System.out.println(Integer.toHexString(-20));System.out.println(Integer.toString(-20,16));</code></pre><p>结果</p><pre><code>--二进制--101001010011111111111111111111111111101100-10100--八进制--242437777777754-24--十六进制--1414ffffffec-14</code></pre><p><strong>当十进制数为正时，toString()的结果和其他3个函数一样，当值为负时，toString()的结果是直接在正值的结果前面加“-”</strong></p><h3 id="2-其他进制转十进制"><a href="#2-其他进制转十进制" class="headerlink" title="2.其他进制转十进制"></a>2.其他进制转十进制</h3><ul><li>Integer.parseInt(String s, int radix)</li><li>Integer.valueOf(String s, int radix)与上一函数结果相同，内部直接调用了上一函数</li></ul><p><strong>但是需要注意，这两个函数与上面的Integer.toString(int i, int radix)的操作是相反的，参数s是“-101”这种形式的，不是真正的二进制（或八进制、十六进制）表示</strong></p><p>代码</p><pre><code>System.out.println(Integer.parseInt(&quot;-1010&quot;,2));System.out.println(Integer.parseInt(&quot;-10000000000000000000000000000000&quot;,2));System.out.println(Integer.parseInt(&quot;-0&quot;,2));System.out.println(Integer.parseInt(&quot;-12&quot;,8));System.out.println(Integer.parseInt(&quot;-a&quot;,16));</code></pre><p>结果</p><pre><code>-10-21474836480-10-10</code></pre><p><a href="http://aaagu1234.blog.163.com/blog/static/4009371520128206358167/" target="_blank" rel="external">原文链接</a></p><h2 id="位运算基本概念"><a href="#位运算基本概念" class="headerlink" title="位运算基本概念"></a>位运算基本概念</h2><p>位运算是对整数中的位进行测试、置位或移位处理，是对数据进行按位操作的手段<br>Java的位操作数只限于字符和整数，对char、byte或者short进行移位处理时，系统会先将它们转换成一个int，然后再进行移位处理<br>移位运算速度高于乘除运算<br>若进行位逻辑运算的两个操作数的数据长度不相同，则返回值是数据长度较长的数据类型</p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p><strong>~</strong>的优先级最高，其次是<strong>&lt;&lt;</strong>、<strong>&gt;&gt;</strong>和<strong>&gt;&gt;&gt;</strong>，再次是<strong>＆</strong>，然后是<strong>^</strong>，优先级最低的是<strong>|</strong></p><ol><li><strong>&amp;</strong> —— 按位进行与运算<br>例如：1100&amp;1010=1000<br>可以用0来屏蔽特定的位，也可以用1来取某个数型数中某些特定的位</li><li><strong>~</strong> —— 按位进行取反运算</li><li><strong>|</strong> —— 按位进行或运算<br>例如：1100|1010=1110<br>可以用1来对某个整型数的特定位的值置1</li><li><strong>^</strong> —— 按位进行异或运算<br>例如：1100^1010=0110<br>数a两次异或同一个数b（a=a^b^b）仍然为原值a</li><li><strong>&lt;&lt;</strong> —— 按位左移</li></ol><ul><li>运算符左侧对象左移由右侧指定的位数，低位补0，最高位抛弃</li><li>带符号的左移位运算相当于对左操作数进行乘2运算</li><li>如果移动的位数超过了该类型的最大位数，那么编译器会对移动的位数取模。如对int型移动33位，实际上只移动了33%32=1位。</li><li>如果移进符号位，那么该值将变为负值</li></ul><ol><li><strong>&gt;&gt;</strong> —— 按位右移<br>运算符左侧对象右移由右侧指定的位数<br>若值为正，在最高位插入0；若值为负，在最高位插入1，即移入的最高位和原最高符号位相同<br>带符号的右移位运算相当于对左操作数进行除2运算</li><li><strong>&gt;&gt;&gt;</strong> —— 按位进行无符号右移<br>无论运算符左边的运算对象取值正负，都在最高位插入0</li></ol><h2 id="位运算的应用"><a href="#位运算的应用" class="headerlink" title="位运算的应用"></a>位运算的应用</h2><ol><li>判断int型变量a是奇数还是偶数<br><strong>a&amp;1 = 0</strong> 偶数<br><strong>a&amp;1 = 1</strong> 奇数</li><li>取int型变量a的第k位 (k=0,1,2……sizeof(int))，即 <strong>a &gt;&gt; k &amp; 1</strong></li><li>将int型变量a的第k位清0，即 <strong>a = a &amp; ~ (1 &lt;&lt; k)</strong> </li><li>将int型变量a的第k位置1，即 <strong>a = a | (1 &lt;&lt; k)</strong> </li><li>将int型变量a循环左移k次，即 <strong>a = a &lt;&lt; k | a &gt;&gt; 32 - k</strong>  </li><li>将int型变量a循环右移k次，即 <strong>a = a &gt;&gt; k | a &lt;&lt; 32 - k</strong></li><li><p>求整数的平均值<br>对于两个整数<strong>x,y</strong>，如果用<strong>(x+y)/2</strong>求平均值，会产生溢出，因为<strong>x+y</strong>可能会大于<strong>INT_MAX</strong>，但是我们知道它们的平均值是肯定不会溢出的，我们用如下算法：</p><pre><code>int average(int x, int y)  //返回X,Y的平均值 {        return (x&amp;y)+((x^y)&gt;&gt;1); } </code></pre><p>注意结果仅保留整数</p></li><li><p>可以不使用临时变量完成两个值的交换，也可以使某个整型数的特定位的值翻转（0对应的位置不翻转，1对应的位置翻转）<br>代码</p><pre><code>int a = 1;int b = 2;a ^= b;b ^= a;a ^= b;System.out.println(&quot;a=&quot;+a+&quot; b=&quot;+b);</code></pre><p>结果</p><pre><code>a=2 b=1</code></pre></li><li><p>对于一个数 x &gt; 0，判断他是不是2的幂</p><pre><code>boolean power2(int x) {     return ((x&amp;(x-1))==0)&amp;&amp;(x!=0)； } </code></pre></li><li><p>计算绝对值</p><p>   int abs( int x ) { </p><pre><code>   int y ;    y = x &gt;&gt; 31 ;    return (x^y)-y ;        //or: (x+y)^y </code></pre><p>   } </p></li><li><p>x 的相反数表示为 <strong>~x + 1</strong></p></li><li><p>给x赋值为a或b中的一个</p><pre><code>   if (x == a)        x = b;    if (x == b)        x = a;</code></pre><p>等价于 <strong>x = a ^ b ^ x</strong><br><a href="http://blog.csdn.net/xiaoliuliu2050/article/details/52994805" target="_blank" rel="external">原文链接</a></p></li></ol><p><strong>最后附上位操作技巧的一篇英文文章：</strong><a href="http://graphics.stanford.edu/~seander/bithacks.html" target="_blank" rel="external">Bit Twiddling Hacks</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h2&gt;&lt;p&gt;Java中的基础类型有：&lt;strong&gt;byte&lt;/strong&gt;、&lt;strong&gt;short&lt;/stron
      
    
    </summary>
    
    
      <category term="Java基础" scheme="http://wangshengbo.me/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="数据类型" scheme="http://wangshengbo.me/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="进制转换" scheme="http://wangshengbo.me/tags/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="位运算" scheme="http://wangshengbo.me/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>正整数划分问题</title>
    <link href="http://wangshengbo.me/2017/10/03/%E6%AD%A3%E6%95%B4%E6%95%B0%E5%88%92%E5%88%86%E9%97%AE%E9%A2%98/"/>
    <id>http://wangshengbo.me/2017/10/03/正整数划分问题/</id>
    <published>2017-10-03T12:21:01.640Z</published>
    <updated>2017-10-03T12:22:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>正整数划分问题，题目描述如下：</p><blockquote><p>将正整数n表示成一系列正整数之和：n=n1+n2+…+nk，其中n1≥n2≥…≥nk≥1，k≥1。<br>  正整数n的这种表示称为正整数n的划分。求正整数n的不同划分个数。<br>  例如正整数6有如下11种不同的划分： 6； 5+1； 4+2，4+1+1； 3+3，3+2+1，3+1+1+1； 2+2+2，2+2+1+1，2+1+1+1+1； 1+1+1+1+1+1</p></blockquote><p><strong>分析：</strong><br>使用递归进行求解，需设置另一个参数m辅助求解<br>递归函数共有两个参数，一个是n，代表待求解的正整数；另一个是m，代表正整数n的划分中最大的数</p><p><strong>Java代码</strong></p><pre><code>public class IntegerDivide {    public static void main(String[] args) throws IOException {        BufferedReader sc = new BufferedReader(new InputStreamReader(System.in));        String str;        while ((str = sc.readLine()) != null) {            int n = Integer.parseInt(str);            System.out.println(integerDivide(n, n));        }    }    public static long integerDivide(int n, int m) {        if (n &lt; 1 || m &lt; 1)            return 0;        if (m == n)            return (integerDivide(n, m - 1) + 1);        if (n == 1 || m == 1) {            return 1;        }        if (n &lt; m) {            return integerDivide(n, n);        }        return integerDivide(n, m - 1) + integerDivide(n - m, m);    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正整数划分问题，题目描述如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将正整数n表示成一系列正整数之和：n=n1+n2+…+nk，其中n1≥n2≥…≥nk≥1，k≥1。&lt;br&gt;  正整数n的这种表示称为正整数n的划分。求正整数n的不同划分个数。&lt;br&gt;  例如正整数6有如
      
    
    </summary>
    
    
      <category term="算法" scheme="http://wangshengbo.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="编程" scheme="http://wangshengbo.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="递归" scheme="http://wangshengbo.me/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>网易：游戏任务标记问题</title>
    <link href="http://wangshengbo.me/2017/10/03/%E7%BD%91%E6%98%93%EF%BC%9A%E6%B8%B8%E6%88%8F%E4%BB%BB%E5%8A%A1%E6%A0%87%E8%AE%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://wangshengbo.me/2017/10/03/网易：游戏任务标记问题/</id>
    <published>2017-10-03T08:26:55.309Z</published>
    <updated>2017-10-03T12:22:35.786Z</updated>
    
    <content type="html"><![CDATA[<p>在牛客网刷笔试题的时候看到过这样一道题，是网易的校招笔试题，题目描述如下：</p><blockquote><p>游戏任务标记问题：<br>游戏里面有很多各式各样的任务，其中有一种任务玩家只能做一次，这类任务一共有1024个，任务ID范围[1,1024]。<br>请用32个unsigned int类型来记录着1024个任务是否已经完成。初始状态都是未完成。<br>输入两个参数，都是任务ID，需要设置第一个ID的任务为已经完成；并检查第二个ID的任务是否已经完成。<br>输出一个参数，如果第二个ID的任务已经完成输出1，如果未完成输出0。<br>如果第一或第二个ID不在[1,1024]范围，则输出-1。</p><p>输入包括一行,两个整数表示任务ID.输出是否完成<br>时间限制：1秒  空间限制：32768K</p></blockquote><p><strong>分析：</strong><br>每个无符号的int类型数据是4个字节，也就是32个bit位，那么32个无符号的int数据一共就有1024个bit位，正好对应1024个任务，每个bit位有1或0两种值，分别对应每个任务是否完成，1代表完成，0代表未完成。<br>用一个长为32的int型数组存储这32个数，如何将1024个任务分成32个组并且很快能找到每个任务对应的bit位是十分关键的，我选择使用模运算来解决这个问题。<br>若任务ID为N，则N % 32的结果（0~31）对应这个任务的完成情况存储在int数组的第几个整数里（int数组的下标，从0开始），以及在这个整数中的第几个bit位（二进制串的字符下标，从0开始）。<br>例如：N = 34的时候，34 % 32 = 2，则这个任务对应的int数组下标为2，对应这个整数的二进制串的第三个bit位。</p><p><strong>第一次AC的JAVA代码</strong></p><pre><code>public class GameMissionlabel {    private int[] MI = new int[32];    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        GameMissionlabel gameMissionlabel = new GameMissionlabel();        while (sc.hasNext()) {    //循环处理输入输出            String mission = sc.nextLine();            String[] ids = mission.split(&quot; &quot;);            int id1 = Integer.parseInt(ids[0]);            int id2 = Integer.parseInt(ids[1]);            System.out.println(gameMissionlabel.checkmission(id1, id2));        }    }    private int checkmission(int id1, int id2) {        if ((1 &lt;= id1 &amp;&amp; id1 &lt;= 1024) &amp;&amp; (1 &lt;= id2 &amp;&amp; id2 &lt;= 1024)) {            // 计算位置            int bucket1 = id1 % 32;            int bucket2 = id2 % 32;            // 将整数转换成二进制字符数组            String binaryString1 = toBinaryString(MI[bucket1]);            char[] binaryChar1 = binaryString1.toCharArray();            // 第一个任务设置成完成            binaryChar1[bucket1] = &#39;1&#39;;            // 重构二进制字符串            String binaryString1New = String.valueOf(binaryChar1);            // 将二进制字符串转换成整数，使用BigInteger是防止10000这样的串转换成int时出错            BigInteger b = new BigInteger(binaryString1New, 2);            MI[bucket1] = b.intValue();            // 判断第二个任务是否完成            String binaryString2 = toBinaryString(MI[bucket2]);            char[] binaryChar2 = binaryString2.toCharArray();            if (binaryChar2[bucket2] == &#39;0&#39;) {                return 0;            } else {                return 1;            }        } else {            return -1;        }    }    private static String toBinaryString(int num) {        String str = &quot;&quot;;        // 0x80000000对应二进制1000 0000 0000 0000 0000 0000 0000 0000        for (int i = 0x80000000; i != 0; i &gt;&gt;&gt;= 1) {            str += (num &amp; i) == 0 ? &#39;0&#39; : &#39;1&#39;;        }        return str;    }}</code></pre><p>AC之后看了一下大神们写的代码，学到了一种最快的JAVA实现方式，对int进行二进制计算直接使用位运算符，能节省很多转换的操作。另外用BufferedReader比Scanner快10倍。代码如下：</p><pre><code>public class GameMissionlabel {    public static int[] res = new int[32];    public static void main(String args[])throws Exception{        BufferedReader scanner = new BufferedReader(new InputStreamReader(System.in));        String [] str = scanner.readLine().split(&quot; &quot;);        if(Integer.parseInt(str[0])&gt;1024||Integer.parseInt(str[0])&lt;1           ||Integer.parseInt(str[1])&gt;1024||Integer.parseInt(str[1])&lt;1){            System.out.println(-1);            return;        }        //1.        int pos = Integer.parseInt(str[0])%32;        int mask=1; //对应二进制为00000000 00000000 00000000 00000001        mask&lt;&lt;=(31-pos);  //将末尾的1移动至对应的位置，末尾自动补0        res[pos]|=mask;  //使用按位或运算将1存储在整数中        //2.        int pos2 = Integer.parseInt(str[1])%32;        int mask2=1;        mask2&lt;&lt;=(31-pos2);        if((res[pos2]&amp;=mask2)!=0){  //使用按位与运算判断原整数中的任务状态            System.out.println(1);        }else{            System.out.println(0);        }    }}</code></pre><p>从这道题可以看出，自己对二进制计算不是很熟悉，需要做一个专题好好学习一下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在牛客网刷笔试题的时候看到过这样一道题，是网易的校招笔试题，题目描述如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;游戏任务标记问题：&lt;br&gt;游戏里面有很多各式各样的任务，其中有一种任务玩家只能做一次，这类任务一共有1024个，任务ID范围[1,1024]。&lt;br&gt;请用32
      
    
    </summary>
    
    
      <category term="算法" scheme="http://wangshengbo.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="编程" scheme="http://wangshengbo.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="二进制计算" scheme="http://wangshengbo.me/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>爬楼梯问题（Fibonacci数列）</title>
    <link href="http://wangshengbo.me/2017/10/03/%E7%88%AC%E6%A5%BC%E6%A2%AF%E9%97%AE%E9%A2%98%EF%BC%88Fibonacci%E6%95%B0%E5%88%97%EF%BC%89/"/>
    <id>http://wangshengbo.me/2017/10/03/爬楼梯问题（Fibonacci数列）/</id>
    <published>2017-10-03T03:31:06.378Z</published>
    <updated>2017-10-03T12:23:16.057Z</updated>
    
    <content type="html"><![CDATA[<p>在牛客网刷编程题的时候，遇到了一道爬楼梯问题，问题描述如下：</p><blockquote><p>You are climbing a stair case. It takes n steps to reach to the top.<br> Each time you can either climb 1 or 2 steps.<br> In how many distinct ways can you climb to the top?</p></blockquote><p>每一次能爬1或2级台阶，那么有多少种不同的方式爬上n级台阶？</p><p><strong>分析：</strong><br>n = 1的时候，只有一种方式（1）<br>n = 2的时候，有两种方式（11,2）<br>n = 3的时候，有3种方式（111,12,21）（n = 1的结果 + n = 2的结果）<br>n = 4的时候，有5种方式（1111,22,211,121,112）（n = 3的结果 + n = 2的结果）<br>……<br>n = k的时候，有(n = k - 1的结果 + n = k - 2的结果)种方式<br>则n的结果是Fibonacci数列</p><p><strong>Java实现</strong><br>求解Fibonacci数列有两种方式，第一种是递归实现，代码如下</p><pre><code>public int fibonacci(int n) {    if (n &lt; 3) {        return n;    }    return fibonacci(n-1)+fibonacci(n-2);}</code></pre><p>递归实现的效率较差，因为很多递归的子问题都是相同的，但是却要重复计算</p><p>第二种实现方式是使用循环累加计算，代码如下</p><pre><code>public int fibonacci(int n) {    if (n &lt; 3) {        return n;    }    int a = 1;    int b=2;    for (int i = 3; i &lt;= n; i++) {        int mid = a;        a = b;        b = mid+a;    }    return b;}</code></pre><p>这种实现方式每一位结果只计算一次，最后推算出最终结果，效率较高</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在牛客网刷编程题的时候，遇到了一道爬楼梯问题，问题描述如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You are climbing a stair case. It takes n steps to reach to the top.&lt;br&gt; Each time you
      
    
    </summary>
    
    
      <category term="算法" scheme="http://wangshengbo.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="编程" scheme="http://wangshengbo.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="递归" scheme="http://wangshengbo.me/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Hexo生成部署博文时报错YAMLException的解决方法</title>
    <link href="http://wangshengbo.me/2017/10/03/Hexo%E7%94%9F%E6%88%90%E9%83%A8%E7%BD%B2%E5%8D%9A%E6%96%87%E6%97%B6%E6%8A%A5%E9%94%99YAMLException%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://wangshengbo.me/2017/10/03/Hexo生成部署博文时报错YAMLException的解决方法/</id>
    <published>2017-10-03T00:57:53.821Z</published>
    <updated>2017-10-03T01:02:39.632Z</updated>
    
    <content type="html"><![CDATA[<p>大家写完博文之后准备使用Hexo生成和部署的时候可能会遇到如下错误：<br><a id="more"></a></p><pre><code>ERROR Process failed: _posts/边界安全防护学习笔记.mdYAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:    ^    at generateError (E:\wangshengbo.github.io\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:162:10)    at throwError (E:\wangshengbo.github.io\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:168:9)    at readBlockMapping (E:\wangshengbo.github.io\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:1040:9)    at composeNode (E:\wangshengbo.github.io\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:1326:12)    at readDocument (E:\wangshengbo.github.io\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:1488:3)    at loadDocuments (E:\wangshengbo.github.io\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:1544:5)    at Object.load (E:\wangshengbo.github.io\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:1561:19)    at parseYAML (E:\wangshengbo.github.io\node_modules\hexo\node_modules\hexo-front-matter\lib\front_matter.js:80:21)    at parse (E:\wangshengbo.github.io\node_modules\hexo\node_modules\hexo-front-matter\lib\front_matter.js:56:12)    ……………………</code></pre><p>上述错误是由于博文的yaml头部格式不正确导致的，正确的头部格式如下：</p><pre><code>title: yourtitledescription: your descriptiontags:  - tag1 - tag2categories: categorie1---以下为正文</code></pre><p>头部和正文之间要使用3个“-”进行分割，3个“-”与头部之间要有一个空行<br>注意冒号后边要有空格，“-”符号前后都要有空格！<br>title的内容中间不能有空格！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家写完博文之后准备使用Hexo生成和部署的时候可能会遇到如下错误：&lt;br&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://wangshengbo.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>边界安全防护学习笔记</title>
    <link href="http://wangshengbo.me/2017/09/30/%E8%BE%B9%E7%95%8C%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://wangshengbo.me/2017/09/30/边界安全防护学习笔记/</id>
    <published>2017-09-30T01:36:01.671Z</published>
    <updated>2017-10-02T08:29:54.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息安全等级保护（四级）中边界安全防护的技术要求"><a href="#信息安全等级保护（四级）中边界安全防护的技术要求" class="headerlink" title="信息安全等级保护（四级）中边界安全防护的技术要求"></a>信息安全等级保护（四级）中边界安全防护的技术要求</h2><p><strong>边界完整性检查</strong><br>1、应能够检测内部网络中出现的内部用户未通过准许私自联到外部网络的行为，即“非法外联”行为。<br>2、应能够对非授权设备私自联到网络的行为进行检查，并准确定位、有效阻断。<br>3、应能够对内部网络用户私自联到外部网络的行为进行检查后准确定出位置，并对其进行有效阻断。<br>4、应能够根据信息流控制策略和信息流的敏感标记阻止重要信息的流出。（网络设备标记，指定路由信息标记）<br><a id="more"></a><br><strong>网络入侵防范</strong><br>1、在网络边界处应监视以下攻击行为端口扫描、强力攻击、木马后门攻击、拒绝服务攻击、缓冲区溢出攻击、IP 碎片攻击、网络蠕虫攻击等入侵事件的发生。<br>2、当检测到入侵事件时，应记录入侵的源IP、攻击的类型、攻击的目的、攻击的时间等并发出安全警告如可采取屏幕实时提示、E-mail 告警、声音告警等几种方式及自动采取相应动作。</p><p><strong>恶意代码防范</strong><br>1、应在网络边界及核心业务网段处对恶意代码进行检测和清除。<br>2、应维护恶意代码库的升级和检测系统的更新。<br>3、应支持恶意代码防范的统一管理。</p><p><em>要点摘要</em><br>1、针对内部用户非法外联进行检测、定位和阻断。————终端安全管理系统，提供非法外联监控功能。<br>2、针对非授权设备非法内联进行检测、定位和阻断。————终端安全管理系统，利用IP/MAC绑定及ARP阻断功能实现非法接入控制。<br>3、阻止重要信息流出（信息流控制策略、信息流的敏感标记、网络设备标记、指定路由信息标记）————防火墙、网闸<br>4、应在网络边界部署访问控制设备，启用访问控制功能；应不允许数据带通用协议通过；应根据数据的敏感标记允许或拒绝数据通过；应不开放远程拨号访问功能。————防火墙<br>5、入侵检测、记录、报警与处理————入侵检测系统<br>6、恶意代码检测与清除————病毒过滤网关系统</p><p><strong>第四级安全区域边界从以下方面进行安全设计</strong><br>1、区域边界访问控制：应在安全区域边界设置自主和强制访问控制机制，实施相应的访问控制策略，对进出安全区域边界的数据信息进行控制，阻止非授权访问。<br>2、区域边界包过滤：应根据区域边界安全控制策略，通过检查数据包的源地址、目的地址、传输层协议、请求的服务等，确定是否允许该数据包进出受保护的区域边界。<br>3、区域边界安全审计：应在安全区域边界设置审计机制，通过安全管理中心集中管理，对确认的违规行为及时报警并做出相应处置。<br>4、区域边界完整性保护：应在区域边界设置探测器，例如外接探测软件，探测非法外联和入侵行为，并及时报告安全管理中心。</p><p><strong>边界防护涉及到的设备和技术</strong><br>1、防火墙（访问控制ACL，不让坏的通过）<br>2、UTM多重安全网关（IPS、AV）<br>3、安全隔离与信息交换系统（网闸）（隔离、缓冲区、代理，让好的通过）<br>4、数据交换网技术（综合使用缓冲区、代理、UTM、防火墙、网闸）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;信息安全等级保护（四级）中边界安全防护的技术要求&quot;&gt;&lt;a href=&quot;#信息安全等级保护（四级）中边界安全防护的技术要求&quot; class=&quot;headerlink&quot; title=&quot;信息安全等级保护（四级）中边界安全防护的技术要求&quot;&gt;&lt;/a&gt;信息安全等级保护（四级）中边界安全防护的技术要求&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;边界完整性检查&lt;/strong&gt;&lt;br&gt;1、应能够检测内部网络中出现的内部用户未通过准许私自联到外部网络的行为，即“非法外联”行为。&lt;br&gt;2、应能够对非授权设备私自联到网络的行为进行检查，并准确定位、有效阻断。&lt;br&gt;3、应能够对内部网络用户私自联到外部网络的行为进行检查后准确定出位置，并对其进行有效阻断。&lt;br&gt;4、应能够根据信息流控制策略和信息流的敏感标记阻止重要信息的流出。（网络设备标记，指定路由信息标记）&lt;br&gt;
    
    </summary>
    
    
      <category term="信息安全" scheme="http://wangshengbo.me/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="等级保护" scheme="http://wangshengbo.me/tags/%E7%AD%89%E7%BA%A7%E4%BF%9D%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>根据完全二叉树的节点数计算二叉树的深度</title>
    <link href="http://wangshengbo.me/2017/09/30/%E6%A0%B9%E6%8D%AE%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/"/>
    <id>http://wangshengbo.me/2017/09/30/根据完全二叉树的节点数计算二叉树的深度/</id>
    <published>2017-09-29T16:00:00.000Z</published>
    <updated>2017-10-03T12:22:50.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>具有N个节点的完全二叉树的深度为$\lfloor\log_2 N\rfloor+1$。</p><h4 id="JAVA代码"><a href="#JAVA代码" class="headerlink" title="JAVA代码"></a>JAVA代码</h4><pre><code>import java.util.Scanner;public class DeepOfTree {    public static void main(String[] args) {        Scanner scanner = new Scanner(System.in);        int nodeNum;        System.out.println(&quot;请输入完全二叉树的节点数：&quot;);        nodeNum = scanner.nextInt();        int deep = (int) (Math.log(nodeNum) / Math.log(2)) + 1;        System.out.println(&quot;完全二叉树的深度为：&quot;+deep);    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;具有N个节点的完全二叉树的深度为$\lfloor\log_2 N\rfloor+1$。&lt;/p&gt;
&lt;h4 id=&quot;JAVA代码&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="算法" scheme="http://wangshengbo.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二叉树" scheme="http://wangshengbo.me/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="编程" scheme="http://wangshengbo.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>笔试编程题注意事项</title>
    <link href="http://wangshengbo.me/2017/09/30/%E7%AC%94%E8%AF%95%E7%BC%96%E7%A8%8B%E9%A2%98%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://wangshengbo.me/2017/09/30/笔试编程题注意事项/</id>
    <published>2017-09-29T16:00:00.000Z</published>
    <updated>2017-10-02T08:29:46.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="牛客网编程题注意事项"><a href="#牛客网编程题注意事项" class="headerlink" title="牛客网编程题注意事项"></a>牛客网编程题注意事项</h2><h4 id="Q-为什么代码在我本机可以通过，提交到牛客网总是提示答案错误"><a href="#Q-为什么代码在我本机可以通过，提交到牛客网总是提示答案错误" class="headerlink" title="Q:为什么代码在我本机可以通过，提交到牛客网总是提示答案错误"></a>Q:为什么代码在我本机可以通过，提交到牛客网总是提示答案错误</h4><p>A:牛客网的每个编程题都有10-50组测试数据，你的代码在本机可以通过仅仅是通过了样例数据，可能存在边界条件考虑不周导致更多的测试数据没有通过，所以会返回答案错误。还有一种可能是你的代码没有处理多个测试用例，例如A+B的代码需要while循环处理<br><a id="more"></a></p><h6 id="C语言代码"><a href="#C语言代码" class="headerlink" title="C语言代码"></a>C语言代码</h6><pre><code>#include &lt;stdio.h&gt;int main() {    int a,b;    while(scanf(&quot;%d %d&quot;,&amp;a, &amp;b) != EOF)    printf(&quot;%d&quot;,a+b);    return 0;}</code></pre><h6 id="JAVA代码"><a href="#JAVA代码" class="headerlink" title="JAVA代码"></a>JAVA代码</h6><pre><code>import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;/* * 使用循环输入输出处理一次多组测试，记得在循环内清空数组、map、set等 * 注意输出结果的行末空格！！输出完全后要换行 * 注意算法时间复杂度 */public class Main {    public static void main(String[] args)throws IOException {        Main main = new Main();        BufferedReader scanner = new BufferedReader(new InputStreamReader(System.in));        String str;        while ((str = scanner.readLine()) != null) {        //循环处理输入            String[] strings = str.split(&quot; &quot;);            main.name();            for (String string : strings) {                System.out.println(string);            }        }    }    public void name() {       //除了输入输出以外的处理逻辑都放在方法里    }}</code></pre><h4 id="Q-为什么Java代码在我本机运行正常，提交到牛客网报编译错误"><a href="#Q-为什么Java代码在我本机运行正常，提交到牛客网报编译错误" class="headerlink" title="Q:为什么Java代码在我本机运行正常，提交到牛客网报编译错误"></a>Q:为什么Java代码在我本机运行正常，提交到牛客网报编译错误</h4><p>A: 因为Java文件名和类名需要保持一致。<br>1、如果编程题已经提供了类和要编写代码的方法，请不要擅自给方法加上static，也不要擅自修改类的名字。也不要给代码增加任何package信息。<br>2、对于没有提供任何辅助代码的编程题，请确认类的名字是Main</p><h4 id="Q-为什么我的代码在本机运行正常，提交到牛客网总是报运行超时"><a href="#Q-为什么我的代码在本机运行正常，提交到牛客网总是报运行超时" class="headerlink" title="Q:为什么我的代码在本机运行正常，提交到牛客网总是报运行超时"></a>Q:为什么我的代码在本机运行正常，提交到牛客网总是报运行超时</h4><p>A:牛客网对每个编程题的运行时间都有限制，一般是限制在1秒，牛客网后台判题的机器显然不如的你的台式机强劲，所以碰到超时请尽量优化你的代码效率。当然也有可能是你代码对某个测试用例死循环了</p><h4 id="Q-为什么代码会提示答案正确（提交异常）"><a href="#Q-为什么代码会提示答案正确（提交异常）" class="headerlink" title="Q:为什么代码会提示答案正确（提交异常）"></a>Q:为什么代码会提示答案正确（提交异常）</h4><p>A:这种情况代码本题你的结果是已AC，但是有点小问题：<br>1、牛客网对提交的代码会做相似度的判断，如果发现你的代码通过的测试用例同时和已有代码相似度过高则会给出答案正确（提交异常）的提示<br>2、根据题目的难易程度会对通过代码的提交频率进行控制，如果你提交通过代码的间隔太小，我们也认为有作弊可能，也会提示提交异常</p><h4 id="Q-运行错误是什么情况"><a href="#Q-运行错误是什么情况" class="headerlink" title="Q:运行错误是什么情况"></a>Q:运行错误是什么情况</h4><p>A:运行错误一般都是数组越界非法访问，野指针乱访问，空指针乱访问等情况造成代码奔溃</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;牛客网编程题注意事项&quot;&gt;&lt;a href=&quot;#牛客网编程题注意事项&quot; class=&quot;headerlink&quot; title=&quot;牛客网编程题注意事项&quot;&gt;&lt;/a&gt;牛客网编程题注意事项&lt;/h2&gt;&lt;h4 id=&quot;Q-为什么代码在我本机可以通过，提交到牛客网总是提示答案错误&quot;&gt;&lt;a href=&quot;#Q-为什么代码在我本机可以通过，提交到牛客网总是提示答案错误&quot; class=&quot;headerlink&quot; title=&quot;Q:为什么代码在我本机可以通过，提交到牛客网总是提示答案错误&quot;&gt;&lt;/a&gt;Q:为什么代码在我本机可以通过，提交到牛客网总是提示答案错误&lt;/h4&gt;&lt;p&gt;A:牛客网的每个编程题都有10-50组测试数据，你的代码在本机可以通过仅仅是通过了样例数据，可能存在边界条件考虑不周导致更多的测试数据没有通过，所以会返回答案错误。还有一种可能是你的代码没有处理多个测试用例，例如A+B的代码需要while循环处理&lt;br&gt;
    
    </summary>
    
    
      <category term="找工作" scheme="http://wangshengbo.me/tags/%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>OSI安全体系</title>
    <link href="http://wangshengbo.me/2016/10/19/OSI%E5%AE%89%E5%85%A8%E4%BD%93%E7%B3%BB/"/>
    <id>http://wangshengbo.me/2016/10/19/OSI安全体系/</id>
    <published>2016-10-19T13:40:27.799Z</published>
    <updated>2017-10-02T08:29:28.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h2><p>由下至上：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。<br><a id="more"></a></p><h2 id="安全服务"><a href="#安全服务" class="headerlink" title="安全服务"></a>安全服务</h2><ol><li>鉴别服务</li><li>访问控制服务</li><li>数据保密性服务</li><li>数据完整性服务</li><li>抗抵赖服务<h2 id="特定安全机制"><a href="#特定安全机制" class="headerlink" title="特定安全机制"></a>特定安全机制</h2></li><li>加密</li><li>数字签名</li><li>访问控制</li><li>数据完整性</li><li>认证交换</li><li>业务流填充<br>在应用连接空闲时，持续发送伪随机序列，使攻击者不知道哪些是有用信息，从而抵抗业务流量分析攻击。</li><li>路由选择控制<br>选择物理上安全的子网络、中继站或链路。</li><li>公证<br>由第三方公证人提供对通信数据的完整性、原发、时间和目的地等进行确保。<h2 id="普遍安全机制"><a href="#普遍安全机制" class="headerlink" title="普遍安全机制"></a>普遍安全机制</h2></li><li>可信功能度机制<br>可信功能度用来度量扩充其他安全机制的范围或建立这些安全机制的有效性。任何功能度，只要它是直接提供安全机制，或提供对安全机制的访问，都应该是可信的。</li><li>安全标记机制<br>对某一资源制定安全标记，明显或隐含。</li><li>事件检测机制</li><li>安全审计跟踪机制</li><li>安全恢复<h2 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h2></li><li>与OSI有关的安全管理<br>系统安全管理、安全服务管理、安全机制管理</li><li>OSI管理的安全<br>管理的功能和通信的安全。</li></ol><hr><p>内容来源：《网络攻防技术教程——从原理到实践》（第一版）杜晔 张大伟 范艳芳 编著 武汉大学出版社</p>]]></content>
    
    <summary type="html">
    
      最近整理了一下OSI安全体系的相关知识。
    
    </summary>
    
    
      <category term="信息安全" scheme="http://wangshengbo.me/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>知道创宇研发技能表v3.1</title>
    <link href="http://wangshengbo.me/2016/10/19/%E7%9F%A5%E9%81%93%E5%88%9B%E5%AE%87%E7%A0%94%E5%8F%91%E6%8A%80%E8%83%BD%E8%A1%A8v3.1/"/>
    <id>http://wangshengbo.me/2016/10/19/知道创宇研发技能表v3.1/</id>
    <published>2016-10-19T13:13:24.885Z</published>
    <updated>2017-10-02T08:30:34.816Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.knownsec.com/Knownsec_RD_Checklist/#" target="_blank" rel="external">知道创宇研发技能表原文链接</a></p>]]></content>
    
    <summary type="html">
    
      知道创宇研发技能表v3.1链接
    
    </summary>
    
    
      <category term="找工作" scheme="http://wangshengbo.me/tags/%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>安全工程师职位要求</title>
    <link href="http://wangshengbo.me/2016/10/19/%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%81%8C%E4%BD%8D%E8%A6%81%E6%B1%82/"/>
    <id>http://wangshengbo.me/2016/10/19/安全工程师职位要求/</id>
    <published>2016-10-19T13:13:14.307Z</published>
    <updated>2017-10-02T08:29:18.145Z</updated>
    
    <content type="html"><![CDATA[<p>（本职位要求来源于各大招聘网站，并进行整理，不断更新中）<br>最近整理了一下各大招聘网站上的安全工程师的职位要求，从理论到技术，从软件到硬件，还包括百度、阿里和知道创宇等公司的职位要求。<br><a id="more"></a></p><h2 id="理论与技术"><a href="#理论与技术" class="headerlink" title="理论与技术"></a>理论与技术</h2><ul><li>精通计算机网络，具备网络故障的分析、判断、解决能力；</li><li>精通网络安全技术:包括端口、服务漏洞扫描、程序漏洞分析检测、权限管理、入侵和攻击分析追踪、网站渗透、病毒木马防范等；</li><li>精通php/shell/perl/python/c/c++ 等至少一种语言;<h2 id="应用与系统"><a href="#应用与系统" class="headerlink" title="应用与系统"></a>应用与系统</h2></li><li>熟悉windows或linux系统</li><li>熟练运用server2008、2012等对服务器进行维护与管理；</li><li>了解主流网络安全产品(如fw、ids、scanner、audit等)的配置及使用;<h2 id="硬件与设备"><a href="#硬件与设备" class="headerlink" title="硬件与设备"></a>硬件与设备</h2></li><li>熟悉主流路由器及核心交换及防火墙配置管理、监测；</li><li>精通LAN/WAN网络规划及建设，精通局域网的维护，可熟练进行局域网的搭建；</li><li>了解常见网络设备（包括网络安全设备）的工作原理、网络设备的基本维护和故障处理；</li><li>熟悉和掌握各种计算机软硬件，可独立进行安装、调试及故障排除；</li></ul><hr><p><strong><em>百度安全工程师校园招聘</em></strong></p><p><strong>工作职责:</strong></p><ul><li>参与安全漏洞跟进处理、安全事件与0Day应急响应，及时感知/挖掘安全风险</li><li>参与公司整体及云计算、大数据、互联网金融等重点业务的安全策略与规范的制定，结合安全技术与运营推动人员安全意识提升和安全风险的缓解，参与安全运营平台化</li><li>参与公司各业务，尤其是金融、云计算、大数据、移动等方向业务的安全设计评审、安全测试与评估</li><li>参与公司（云）安全产品的设计、维护、及核心能力的持续提升，比如漏洞云扫描、云WAF、基于大数据的多层入侵监控与威胁感知、代码与环境安全质量控制等</li><li>参与对公司内部、重点业务（如云计算）相关的渗透测试，参与研究漏洞挖掘及利用技术，为不断完善提升公司安全防御及云安全服务能力提供技术驱动力</li></ul><p><strong>职责要求:</strong></p><ul><li>具备基本的计算机技术基础（基本网络协议、基本编程能力）</li><li>有漏洞挖掘或代码安全审计经验</li><li>有渗透测试经验（熟悉典型漏洞的发现与利用）</li><li>具备基本的安全漏洞修复与攻击防御知识</li><li>追求卓越，不甘平庸，具备强烈的事业心和开拓创新精神</li><li>优秀的沟通能力以及团队合作精神</li><li>有下列相关经验者优先：<br>  有大型互联网企业实习经验者优先；<br>  有专注于漏洞挖掘与利用技术研究者优先；<br>  有大型互联网渗透经验者优先。</li></ul><hr><p><strong><em>阿里安全工程师校园招聘</em></strong></p><p><strong>岗位描述</strong></p><p>从web安全到底层系统安全，<br>从客户端安全到无线产品安全，<br>从安全规范制定到实时应急响应，<br>一切的努力都为了更安全！</p><p><strong>岗位要求</strong></p><ul><li>熟识计算机网络，具备Linux环境下C/C++开发能力，至少掌握perl/python/shell一种脚本语言；如果你熟知web安全，了解当前流行的web漏洞（XSS, SQL Injection, CSRF, etc），了解java开发框架（Struts,spring,ibatis,hibernate,etc）； </li><li>具备windows客户端安全攻防的经验，或了解Android/iOS无线客户端安全； </li><li>了解Linux系统管理和网络管理相关操作，了解Linux系统的安全漏洞，有Linux exploit code/shellcode编写经验； </li><li>熟悉TCP/IP协议栈和路由交换原理，熟悉企业级服务器安全；</li></ul><hr><p><strong><em>知道创宇404安全研究员</em></strong></p><p><strong>岗位职责：</strong></p><ol><li>国内外安全技术的跟进和重现，包括：操作系统安全漏洞、WEB应用安全漏洞、IoT类设备安全漏洞</li><li>根据自身研究方向研究系统原理和漏洞原理</li><li>为公司安全产品提供代码级技术原型支持</li><li>对业界目前的攻击和防御办法进行研究和跟踪，研究新的攻击和防御方法</li></ol><p><strong>职位要求：</strong></p><ol><li>具备一些漏洞研究的能力，能够理解漏洞原理</li><li>对于安全技术有深厚的兴趣，并且希望投入主要精力进行跟进和研究</li><li>有编程思维，C/C++、python、java、ruby或其他脚本编程语言至少一种，通过一定时间的工作积累可以写一些辅助测试工具</li><li>对各类领域的新技术感兴趣，善用Google，愿意花时间阅读E文文档</li><li>具有良好的沟通能力、协调能力、理解能力，并拥有强烈的责任心和团队管理能力，能承受一定强度的工作压力</li><li>喜欢研究安全技术，愿意花大量时间完成某项安全测试</li><li>能够深入到操作系统底层理解漏洞为加分项</li></ol><hr><p><strong><em>知道创宇安全研究员（实习）</em></strong></p><p><strong>职位要求：</strong><br>1.至少精通一门脚本语言；<br>2.熟习各种Web安全攻防手法；<br>3.精通WEB应用程序渗透测试方法和定制攻击自动化；<br>4.深入理解OWASP风险评估中前十位Web攻击模式和评估方法；<br>5.知道如何跟踪最新的Web安全信息动态；<br>6.善于挖掘Web安全漏洞或有安全工具开发经验者优先；<br>7.对Web安全有浓厚的兴趣和较强的独自钻研能力，有良好的团队精神。</p><hr><p><strong><em>知道创宇前端安全研究员（实习）</em></strong></p><p><strong>岗位职责</strong><br>1、对主流浏览器进行前端漏洞挖掘<br>2、对主流Web系统进行前端漏洞挖掘</p><p><strong>职位要求</strong><br>1、擅长Linux/Unix系统操作，以Linux/Mac作为工作平台<br>2、熟悉JavaScript、Jquery等，能够独立编写漏洞利用程序<br>3、掌握JavaScript及IE、Safari、Chrome、FireFox、Thunder Bird、Opera等主流浏览器，能够有针对性的进行XSS、ClickJacking和CSRF</p><p><strong>优先条件</strong><br>1、有实战经验者优先。<br>2、在著名白帽子类网站发表过严重的信息安全漏洞<br>3、在各类信息安全大会上有过个人主题演讲<br>4、在各类信息安全攻防类大赛上获得过集体或个人奖项</p><hr>]]></content>
    
    <summary type="html">
    
      最近整理了一下各大招聘网站上的安全工程师的职位要求，从理论到技术，从软件到硬件，还包括百度、阿里和知道创宇等公司的职位要求。
    
    </summary>
    
    
      <category term="信息安全" scheme="http://wangshengbo.me/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="找工作" scheme="http://wangshengbo.me/tags/%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>漏洞扫描</title>
    <link href="http://wangshengbo.me/2016/10/19/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F/"/>
    <id>http://wangshengbo.me/2016/10/19/漏洞扫描/</id>
    <published>2016-10-19T13:12:57.867Z</published>
    <updated>2017-10-02T08:30:22.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞扫描方法"><a href="#漏洞扫描方法" class="headerlink" title="漏洞扫描方法"></a>漏洞扫描方法</h2><ol><li>在端口扫描后得知目标主机操作系统类型、开启的端口以及端口上的网络服务，将这些相关信息与网络漏洞扫描系统提供的漏洞裤进行匹配，查看是否有满足匹配条件的漏洞存在</li><li>通过模拟黑客的攻击手法，对目标主机系统进行攻击性的安全漏洞扫描，如测试弱口令等。若模拟攻击成功，则表明目标主机系统存在安全漏洞。<a id="more"></a></li></ol><h2 id="漏洞扫描的分类"><a href="#漏洞扫描的分类" class="headerlink" title="漏洞扫描的分类"></a>漏洞扫描的分类</h2><p>扫描对象：</p><ol><li>基于网络的扫描<br>从外部攻击者的角度对网络及系统架构进行的扫描，主要用于查找网络服务和协议中的漏洞。基于网络的漏洞扫描工具根据不同漏洞的特性，构造网络数据包，发给网络中的一个或多个目标服务器，以判断某个特定的漏洞是否存在。</li><li>基于主机的扫描<br>从一个内部用户的角度来检测操作系统级的漏洞（主要用于检测注册表和用户配置中的漏洞）。扫描器通常在目标系统上安装一个代理或服务，以便能够访问所有的文件与进程。优势在于能直接获取主机操作系统的底层细节（如特殊服务和配置的细节等），缺点在于需要先控制目标主机并安装检测工具。</li></ol><p>扫描方式：</p><ol><li>主动扫描<br>给目标主机发送特定的包并收集回应包来取得相关信息。优势：快速获取信息，准确性高。缺点：易于被发现，难掩盖扫描痕迹，突破防火墙比较困难。</li><li>被动扫描<br>通过监听网络包来取得信息。优势：难以被检测，不易受防火墙影响。缺点：速度慢，准确性差，目标不产生网络流量时无法获得信息。</li></ol><hr><p>内容来源：《网络攻防技术教程——从原理到实践》（第一版）杜晔 张大伟 范艳芳 编著 武汉大学出版社</p>]]></content>
    
    <summary type="html">
    
      整理了一些漏洞扫描的基本概念和方法
    
    </summary>
    
    
      <category term="信息安全" scheme="http://wangshengbo.me/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络嗅探</title>
    <link href="http://wangshengbo.me/2016/10/19/%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2/"/>
    <id>http://wangshengbo.me/2016/10/19/网络嗅探/</id>
    <published>2016-10-19T13:12:21.089Z</published>
    <updated>2017-10-02T08:30:28.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="嗅探器Sniffer"><a href="#嗅探器Sniffer" class="headerlink" title="嗅探器Sniffer"></a>嗅探器Sniffer</h2><p>Sniffer是利用计算机的网络接口截获目的地为其他计算机数据报文的一种工具，可以用来监视网络的状态、数据流动情况以及网络上传输的信息。</p><ul><li>FTP、Telnet、SMTP、POP等协议使用明文传输数据。</li><li>局域网可分为共享式局域网与交换式局域网。</li><li>共享式局域网使用集线器（Hub），工作在物理层，把一个端口接收到的信号向所有其他端口分发。</li><li>交换式局域网使用交换机（Switch），能够检查数据包中的目标物理地址来选择目标端口，从而将数据只转发到与该目标端口相连的主机或设备中。</li><li>Sniffer只能抓取一个物理网段内的包，你和监听的目标中间不能有路由或其他屏蔽广播包的设备。</li><li>Sniffer分为硬件和软件两种，软件Sniffer无法抓取网络上所有的传输。</li></ul><a id="more"></a><h2 id="对共享式网络的嗅探"><a href="#对共享式网络的嗅探" class="headerlink" title="对共享式网络的嗅探"></a>对共享式网络的嗅探</h2><p>Sniffer将网卡的工作模式由正常改变为混杂模式，就可以对所有监听到的数据帧都产生一个硬件中断并提交给主机进行处理。设置混杂模式可能需要root权限。</p><h2 id="对交换式网络的嗅探"><a href="#对交换式网络的嗅探" class="headerlink" title="对交换式网络的嗅探"></a>对交换式网络的嗅探</h2><ul><li>ARP欺骗<br> 1.Windows中使用arp -a命令查看ARP缓存表。<br> 2.在动态ARP实现中，任何ARP响应分组都可以刷新ARP缓存表中的记录，而不管这个ARP分组是否是对一个ARP请求分组的应答。<br> 3.如果要欺骗整个网络，伪造包的目的MAC地址改为FF:FF:FF:FF:FF:FF；目的IP地址改为FF:FF:FF:FF；源IP地址改为网关的IP，源MAC地址仍为本机地址，同时欺骗网关，并做好数据包的转发。</li><li>交换机MAC地址表溢出<br>地址表是MAC地址——交换机端口转换表，地址表大小有上限，溢出之后交换机会广播所有数据包。此时相当于集线器，网络变为共享式。</li><li>MAC地址伪造<br>若交换机转发表是动态更新，并采用牛奶策略。攻击者不断发送数据包，并把源MAC地址改为攻击目标的地址，从而不断更新交换机转发表。</li><li>ICMP重定向攻击<br>ICMP重定向包用来告诉机器向另一个不同的路由器（或机器）发送它的数据包。除了路由器的主机必须服从ICMP重定向。<h2 id="嗅探器的检测与防范"><a href="#嗅探器的检测与防范" class="headerlink" title="嗅探器的检测与防范"></a>嗅探器的检测与防范</h2></li></ul><p><strong>主动检测</strong></p><ul><li>ARP广播地址探测<br>在混乱模式时，网卡检测收到包的目的以太网的第一个八位组值，若是0xFF，则认为是广播地址。因此发送一个目的地址为FF-00-00-00-00-00的ARP包，如果某主机以自己的MAC地址回应这个包，那么它运行在混杂模式下。</li><li>ping方法<br>向可疑主机发送包含正确IP地址和错误MAC地址的Ping包，如果回应，则该主机在运行嗅探器程序。</li><li>DNS方法（不懂……）<br>一些嗅探器在收到一个网络请求时，就会执行DNS反向查询，试着将IP地址解释为主机名。因此，如果你在网络中执行一个Ping扫描或者Pinging一个不存在的IP地址，就会触发这种活动。如果得到了回应，就说明网络中安装有网络嗅探器，如果没有收到任何回应，表明没有嗅探器在运行。</li><li>源路径方法<br>这种方法在IP头中配置源路由信息,可以用于其它临近网段,具体步骤如下:<br>①设A为可疑主机,B为检测主机,C为同一网段的另一台主机,C不具有转发功能。<br>②B发送数据给A,设置为必须经过C。<br>③如果能接收到数据的响应信息,那么查看TTL值域,如果不变,说明A运行嗅探器程序。<br>B发给A的数据事实上发给C,由于C不具有转发功能,所以数据不能到达A,但是由于A运行了嗅探器程序,所以才能接收到数据。</li><li>诱骗方法</li><li>网络带宽出现反常</li><li>网络通信丢包率高</li><li>等待时间方法<br>这种方法在网络中发送大量数据,这对设置在非混杂模式的机器没有影响,但是对运行嗅探器程序的机器有影响。特别是用于口令的语法分析应用层协议。只要在未发送数据之前以及发送数据之后PING主机,对比两次的响应时间差别就可以检测。这种方法很有效,不过可能明显降低网络性能。</li><li>使用检测工具Anti-sniff等</li></ul><p><strong>被动防范</strong></p><ul><li>安全的拓扑结构</li><li>会话加密</li><li>使用静态的ARP或者IP-MAC对应表</li></ul><hr><p>内容来源：《网络攻防技术教程——从原理到实践》（第一版）杜晔 张大伟 范艳芳 编著 武汉大学出版社</p>]]></content>
    
    <summary type="html">
    
      整理了一些网络嗅探方面的基本概念和方法
    
    </summary>
    
    
      <category term="信息安全" scheme="http://wangshengbo.me/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>不积跬步，无以至千里</title>
    <link href="http://wangshengbo.me/2016/09/25/%E4%B8%8D%E7%A7%AF%E8%B7%AC%E6%AD%A5%EF%BC%8C%E6%97%A0%E4%BB%A5%E8%87%B3%E5%8D%83%E9%87%8C/"/>
    <id>http://wangshengbo.me/2016/09/25/不积跬步，无以至千里/</id>
    <published>2016-09-25T08:09:51.162Z</published>
    <updated>2017-10-02T08:30:00.425Z</updated>
    
    <content type="html"><![CDATA[<p>这个周末解锁了好多新成就，第一次搭建个人博客…第一次使用Hexo…第一次使用MarkDown…不过这些成就早就该解锁了，这些计划已经写下了很久了。作为一名计算机专业的大学生，读研之后才有了自己的博客，对自己的拖延癌症晚期深刻的检讨一下……说真的，域名买了好久，到现在才真正能够访问，而且自己一直想做的个人主页还没有雏形……之前数次想行动，到最终还是搁置了下来。</p><p>零零碎碎学了各种各样的知识，开发、系统、安全等等。无论是编程语言还是系统模型，到最后要用到的时候还是无法回忆起具体的内容，其他同学心中烂熟的概念我还没建立起来。可能是我的记忆力确实差吧，再加上没有深入的实践和应用。所以必须要把自己学到的点点滴滴的知识记录整理下来，慢慢的积累，方便自己随时查看并纠正自己之前的错误。这也是搭建个人博客的初衷所在。</p><p>之前的设想是自己从头写一个完整的博客系统，最后实践时才发现是多么的困难，而且写出能用的博客系统不知道要哪年哪月，主要是自己真的菜……所以图省事采用了Hexo和Github Pages来搭建博客，也想尽快能够使用博客。现在博客系统还有许多需要修改的地方，以后慢慢的调整吧，距离自己印象中的样子差太远啦。</p><p>想学的东西好多好多，想做的东西也很多，想玩的东西更多，脚踏实地吧。</p><p>不积跬步，无以至千里，想在信息安全的路上走的再远一点。</p>]]></content>
    
    <summary type="html">
    
      这个周末解锁了好多新成就，第一次搭建个人博客…第一次使用Hexo…第一次使用MarkDown…
    
    </summary>
    
    
      <category term="散记" scheme="http://wangshengbo.me/tags/%E6%95%A3%E8%AE%B0/"/>
    
  </entry>
  
</feed>
